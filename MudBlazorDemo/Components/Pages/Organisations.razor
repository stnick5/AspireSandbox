@page "/organisations"
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

<PageTitle>Organisations</PageTitle>

@inject OrganisationApiClient OrganisationApi

<MudText Typo="Typo.h3" GutterBottom="true">Organisations</MudText>

<MudText Typo="Typo.body1">The weather API data is loaded from the BlazorDemo.OrganisationApi project. The data is cached in Redis, and is set to expire after 5 seconds.</MudText>
<MudText Typo="Typo.body1">Unlike on the Weather page the InteractiveWebAssembly rendermode isn't specified on this page. Because of this reloading the page causes the data to be regenerated, without being pulled from the cache.</MudText>
<MudText Typo="Typo.body1" Class="mb-8">The OnInitializedAsync() method is also being called twice on page refresh, resulting in the data being generated twice.</MudText>

@if (organisations is null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}
else
{
    <MudDataGrid Items="@organisations">
        <Columns>
            <PropertyColumn Property="x => x.OrganisationGuid" Title="Organisation Guid"/>
            <PropertyColumn Property="x => x.OrganisationName" Title="Organisation Name"/>
        </Columns>
    </MudDataGrid>
}

@code {
    private Organisation[]? organisations;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);

        organisations = await OrganisationApi.GetOrganisationsAsync();
    }
}